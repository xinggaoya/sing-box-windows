name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build (${{ matrix.os }})
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf \
            build-essential curl wget file libxdo-dev libssl-dev librsvg2-dev librsvg2-common \
            pango1.0-tools libcairo2-dev libgdk-pixbuf2.0-dev libglib2.0-dev libsoup2.4-dev

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: |
          pnpm install --no-frozen-lockfile
          pnpm store prune

      - name: Install Tauri CLI
        run: pnpm add -D @tauri-apps/cli

      - name: Build application
        shell: bash
        run: |
          pnpm run build
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            pnpm exec tauri build --target ${{ matrix.target }}
          else
            pnpm exec tauri build
          fi

      - name: List build artifacts
        shell: bash
        run: |
          echo "Target: ${{ matrix.target }}"
          echo "Build directory contents:"
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/ || true
          else
            ls -la src-tauri/target/release/bundle/ || true
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            ${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/**/*' || 'src-tauri/target/release/bundle/**/*' }}
          retention-days: 1

  release:
    name: Create Release
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: windows-artifacts/

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: linux-artifacts/

      - name: Extract tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update Release Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            windows-artifacts/msi/*.msi
            windows-artifacts/nsis/*.exe
            linux-artifacts/appimage/sing-box-windows_*.AppImage*
            linux-artifacts/deb/sing-box-windows_*.deb*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}